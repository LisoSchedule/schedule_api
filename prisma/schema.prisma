generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum TeacherPosition {
  DepartmentProfessor
  Professor
  AssociateProfessor
  SeniorLecturer
  Assistant
}

enum RepeatType {
  Daily
  Weekly
  Monthly
}

enum SubjectType {
  Lecture
  Practice
}

model Group {
  id       Int    @id @default(autoincrement())
  name     String
  subGroup Int    @map("sub_group")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users   User[]
  lessons Lesson[]

  @@map("groups")
}

model User {
  id       Int     @id @default(autoincrement())
  chatId   BigInt  @map("chat_id")
  username String?
  nickname String?
  groupId  Int     @map("group_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  group Group @relation(fields: [groupId], references: [id])

  @@map("users")
}

model Subject {
  id   Int         @id @default(autoincrement())
  name String
  type SubjectType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lessons Lesson[]

  @@map("subjects")
}

model Teacher {
  id       Int             @id @default(autoincrement())
  name     String
  position TeacherPosition

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lessons Lesson[]

  @@map("teachers")
}

model Audience {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lessons Lesson[]

  @@map("audiences")
}

model Lesson {
  id         Int      @id @default(autoincrement())
  subjectId  Int      @map("subject_id")
  teacherId  Int      @map("teacher_id")
  audienceId Int      @map("audience_id")
  groupId    Int      @map("group_id")
  startTime  DateTime @map("start_time")
  duration   Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subject  Subject  @relation(fields: [subjectId], references: [id])
  teacher  Teacher  @relation(fields: [teacherId], references: [id])
  audience Audience @relation(fields: [audienceId], references: [id])
  group    Group    @relation(fields: [groupId], references: [id])

  recurrences LessonRecurrence[]

  @@map("lessons")
}

model LessonRecurrence {
  id          Int        @id @default(autoincrement())
  lessonId    Int        @map("lesson_id")
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  repeatType  RepeatType @map("repeat_type")
  repeatValue Int        @map("repeat_value")

  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@map("lesson_recurrences")
}
